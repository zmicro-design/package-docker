#!/bin/bash

# Returning a boolean from a bash function
#   [Solved]: Stack Overflow: https://stackoverflow.com/questions/5431909/returning-a-boolean-from-a-bash-function
#
docker::is_docker_installed() {
  which docker >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    log::debug "[docker::is_docker_installed] Docker not found"
    return 1
  fi

  DOCKER_VERSION=$(docker::get_docker_version)
  log::info "Docker Installed(version: ${DOCKER_VERSION})"
  return 0
}

docker::get_docker_version() {
  echo $(docker version -f {{.Client.Version}})
}

docker::is_network_exist() {
  sudo docker network inspect $PACKAGE_DOCKER_DEFAULT_NETWORK >>/dev/null 2>&1
  if [ "$?" = "0" ]; then
    echo "true"
  else
    echo "false"
  fi
}

docker::create_network() {
  # sudo docker network inspect $PACKAGE_DOCKER_DEFAULT_NETWORK >>/dev/null 2>&1
  # if [ "$?" != "0" ]; then
  #   sudo docker network create $PACKAGE_DOCKER_DEFAULT_NETWORK
  # fi

  if [ "$(docker::is_network_exist)" = "false" ]; then
    log::info "Create Network: ${PACKAGE_DOCKER_DEFAULT_NETWORK}"
    sudo docker network create $PACKAGE_DOCKER_DEFAULT_NETWORK >>/dev/null 2>&1
  fi
}

docker::try_to_remove_podman() {
  if [ "$(os::has_command podman)" = "0" ]; then
    log::info "Found podman, removing ..."
    pm remove -y podman

    # Clean
    #   1. docker
    sudo rm -rf $(which docker)

    # log::info "Upgrade Docker ..."
  fi
}

docker::install_docker_core() {
  # Returning a boolean from a bash function
  #   Useage
  if docker::is_docker_installed; then
    docker::create_network
    return
  fi

  log::info "Install Docker ..."
  if [ "$(os::is_macos)" = "true" ]; then
    if [ "$(os::is_ci)" != "true" ]; then
      # 2. Runtime
      # brew install colima
      zmicro package install colima
    fi

    # MacOS
    # 1. CLI
    # brew install docker
    docker::install_docker_cli_only
  else
    # Linux
    sudo curl -fsSL https://get.docker.com -o $PACKAGE_DOCKER_TMP_INSTALL_SCRIPT
    sudo sh $PACKAGE_DOCKER_TMP_INSTALL_SCRIPT
    # Role
    sudo usermod -aG docker $USER
    # Clean
    sudo rm -f $PACKAGE_DOCKER_TMP_INSTALL_SCRIPT
  fi
}

docker::install_docker_cli_only() {
  zmicro package install docker-cli
}

docker::start_docker() {
  if [ "$(os::is_macos)" = "true" ]; then
    if [ "$(os::has_command colima)" = "true" ]; then
      zmicro colima status
      if [ "$?" != "0" ]; then
        # 3. Start
        log::info "[$(timestamp)] starting docker with colima ..."
        zmicro colima start --cpu 4 --memory 8 --disk 100
      fi
    fi
    return
  fi

  # Linux
  sudo systemctl status docker >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    log::info "Start Docker daemon ..."

    sudo systemctl enable docker
    sudo systemctl start docker
  fi

  # @TODO create default network
  # sudo docker network create compose-ingress
  if [ "$(docker::is_network_exist)" = "false" ]; then
    log::info "Create Network: ${PACKAGE_DOCKER_DEFAULT_NETWORK}"
    sudo docker network create $PACKAGE_DOCKER_DEFAULT_NETWORK >>/dev/null 2>&1
  fi
}

docker::stop_docker() {
  sudo systemctl stop docker
  sudo systemctl disable docker
}

docker::remove_docker_core() {
  pm remove -y docker-ce docker-ce-cli containerd.io
}

#######

install() {
  if [ "$(os::is_docker)" = "true" ] || [ "$(os::is_docker_build_env)" = "true" ]; then
    log::warn "[$(timestamp)] You are in docker (build) env."

    if [ "$(os::has_command docker)" = "false" ]; then
      log::info "Install Docker CLI Only (with buildx) ..."
      docker::install_docker_cli_only

      log::info "Install Docker CLI BuildX ..."
      zmicro package install docker-buildx
    fi

    # # if [ ! -f "/var/run/docker.sock" ]; then
    # file /var/run/docker.sock >> /dev/null 2>&1
    # if [ "$?" != "0" ]; then
    #   log::error "You have not binded /var/run/docker.sock."
    #   exit 1
    # fi
    return
  fi

  log::info "[$(timestamp)] checking podman and remove ..."
  docker::try_to_remove_podman

  log::info "[$(timestamp)] installing docker service ..."
  docker::install_docker_core

  log::info "[$(timestamp)] starting docker service ..."
  docker::start_docker
}

remove() {
  docker::try_to_remove_podman

  # Returning a boolean from a bash function
  #   Useage
  if ! docker::is_docker_installed; then
    log "Cannot found docker or docker has been already removed before."
    exit 0
  fi

  log "Stop Docker Daemon ..."
  docker::stop_docker

  log "Remove Docker ..."
  docker::remove_docker_core
}

export -f docker::is_docker_installed
export -f docker::get_docker_version
export -f docker::is_network_exist
export -f docker::create_network
export -f docker::try_to_remove_podman
export -f docker::install_docker_core
export -f docker::start_docker
export -f docker::stop_docker
export -f docker::remove_docker_core
export -f docker::install_docker_cli_only

export -f install
export -f remove
